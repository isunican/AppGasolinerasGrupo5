Index: app/src/main/java/com/isunican/proyectobase/Presenter/PresenterGasolineras.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.isunican.proyectobase.Presenter;\r\n\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport com.isunican.proyectobase.DataBase.Filtro;\r\nimport com.isunican.proyectobase.Model.Gasolinera;\r\nimport com.isunican.proyectobase.R;\r\nimport com.isunican.proyectobase.Utilities.ParserJSONGasolineras;\r\nimport com.isunican.proyectobase.Utilities.RemoteFetch;\r\nimport java.io.BufferedInputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\n\r\n/*\r\n------------------------------------------------------------------\r\n    Clase presenter con la logica de gasolineras\r\n    Mantiene un objeto ListaGasolineras que es el que mantendrá\r\n    los datos de las gasolineras cargadas en nuestra aplicación\r\n    Incluye métodos para gestionar la lista de gasolineras y\r\n    cargar datos en ella.\r\n------------------------------------------------------------------\r\n*/\r\npublic class PresenterGasolineras {\r\n\r\n    private List<Gasolinera> gasolineras;\r\n    private List<Gasolinera> copia;\r\n\r\n\r\n\r\n\r\n    //URLs para obtener datos de las gasolineras\r\n    //https://sedeaplicaciones.minetur.gob.es/ServiciosRESTCarburantes/PreciosCarburantes/help\r\n    public static final String URL_GASOLINERAS_SPAIN=\"https://sedeaplicaciones.minetur.gob.es/ServiciosRESTCarburantes/PreciosCarburantes/EstacionesTerrestres/\";\r\n    public static final String URL_GASOLINERAS_CANTABRIA=\"https://sedeaplicaciones.minetur.gob.es/ServiciosRESTCarburantes/PreciosCarburantes/EstacionesTerrestres/FiltroCCAA/06\";\r\n    public static final String URL_GASOLINERAS_SANTANDER=\"https://sedeaplicaciones.minetur.gob.es/ServiciosRESTCarburantes/PreciosCarburantes/EstacionesTerrestres/FiltroMunicipio/5819\";\r\n    public static final String SANTANDER=\"Santander\";\r\n\r\n    /**\r\n     * Constructor, getters y setters\r\n     */\r\n    public PresenterGasolineras(){\r\n        gasolineras = new ArrayList<>();\r\n    }\r\n\r\n    public List<Gasolinera> getGasolineras(){\r\n        return gasolineras;\r\n    }\r\n    public List<Gasolinera> getFiltradas(){\r\n        return copia;\r\n    }\r\n\r\n\r\n    public void setGasolineras(List<Gasolinera> l) {\r\n        this.gasolineras = l;\r\n    }\r\n\r\n\r\n    /**\r\n     * cargaDatosGasolineras\r\n     *\r\n     * Carga los datos de las gasolineras en la lista de gasolineras de la clase.\r\n     * Para ello llama a métodos de carga de datos internos de la clase ListaGasolineras.\r\n     * En este caso realiza una carga de datos remotos dada una URL\r\n     *\r\n     * Habría que mejorar el método para que permita pasar un parámetro\r\n     * con los datos a cargar (id de la ciudad, comunidad autónoma, etc.)\r\n     *\r\n     * @param\r\n     * @return boolean Devuelve true si se han podido cargar los datos\r\n     */\r\n    public boolean cargaDatosGasolineras() {\r\n        return cargaDatosRemotos(URL_GASOLINERAS_CANTABRIA);\r\n    }\r\n\r\n    /**\r\n     * cargaDatosDummy\r\n     *\r\n     * Carga en la lista de gasolineras varias gasolineras definidas a \"mano\"\r\n     * para hacer pruebas de funcionamiento\r\n     *\r\n     * @param\r\n     * @return boolean\r\n     */\r\n    /**\r\n    public boolean cargaDatosDummy(){\r\n        this.gasolineras.add(new Gasolinera(1000,SANTANDER,SANTANDER, \"Av Valdecilla\", 1.299,1.359,\"AVIA\"));\r\n        this.gasolineras.add(new Gasolinera(1053,SANTANDER,SANTANDER, \"Plaza Matias Montero\", 1.270,1.349,\"CAMPSA\"));\r\n        this.gasolineras.add(new Gasolinera(420,SANTANDER,SANTANDER, \"Area Arrabal Puerto de Raos\", 1.249,1.279,\"E.E.S.S. MAS, S.L.\"));\r\n        this.gasolineras.add(new Gasolinera(9564,SANTANDER,SANTANDER, \"Av Parayas\", 1.189,1.269,\"EASYGAS\"));\r\n        this.gasolineras.add(new Gasolinera(1025,SANTANDER,SANTANDER, \"Calle el Empalme\", 1.259,1.319,\"CARREFOUR\"));\r\n        return true;\r\n    }**/\r\n\r\n    /**\r\n     * cargaDatosLocales\r\n     *\r\n     * A partir de la dirección de un fichero JSON pasado como parámetro:\r\n     * Parsea la información para obtener una lista de gasolineras.\r\n     * Finalmente, dicha lista queda almacenada en la clase.\r\n     *\r\n     * @param fichero Nombre del fichero\r\n     * @return boolean Devuelve true si se han podido cargar los datos\r\n     */\r\n    public boolean cargaDatosLocales(String fichero){\r\n        return(fichero != null);\r\n    }\r\n\r\n    /**\r\n     * cargaDatosRemotos\r\n     *\r\n     * A partir de la dirección pasada como parámetro:\r\n     * Utiliza RemoteFetch para cargar el fichero JSON ubicado en dicha URL\r\n     * en un stream de datos.\r\n     * Luego utiliza ParserJSONGasolineras para parsear dicho stream\r\n     * y extraer una lista de gasolineras.\r\n     * Finalmente, dicha lista queda almacenada en la clase.\r\n     *\r\n     * @param direccion direccion URL del JSON con los datos\r\n     * @return boolean Devuelve true si se han podido cargar los datos\r\n     */\r\n    public boolean cargaDatosRemotos(String direccion){\r\n        try {\r\n            BufferedInputStream buffer = RemoteFetch.cargaBufferDesdeURL(direccion);\r\n            copia = ParserJSONGasolineras.parseaArrayGasolineras(buffer);\r\n            Log.d(\"ENTRA\", \"Obten gasolineras:\" + gasolineras.size());\r\n            for (Gasolinera gasolinera : copia) {\r\n                gasolineras.add(gasolinera);\r\n            }\r\n            return true;\r\n        } catch (Exception e) {\r\n            Log.e(\"ERROR\", \"Error en la obtención de gasolineras: \" + e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void filtrarPorCombustible(View view, Filtro filtro) {\r\n        View viewGasoilAPrecio = view.findViewById(R.id.textViewGasoleoA);\r\n        View viewGasoilALabel = view.findViewById(R.id.textViewGasoleoALabel);\r\n        View viewGasoilBPrecio = view.findViewById(R.id.textViewGasoleoB);\r\n        View viewGasoilBLabel = view.findViewById(R.id.textViewGasoleoBLabel);\r\n        View viewGasoilPremiumPrecio = view.findViewById(R.id.textViewGasoleoPremium);\r\n        View viewGasoilPremiumLabel = view.findViewById(R.id.textViewGasoleoPremiumLabel);\r\n        View viewGasolina95E10Precio = view.findViewById(R.id.textViewGasolina95E10);\r\n        View viewGasolina95E10Label = view.findViewById(R.id.textViewGasolina95E10Label);\r\n        View viewGasolina95E5Precio = view.findViewById(R.id.textViewGasolina95E5);\r\n        View viewGasolina95E5Label = view.findViewById(R.id.textViewGasolina95E5Label);\r\n        View viewGasolina95E5PremiumPrecio = view.findViewById(R.id.textViewGasolina95E5Premium);\r\n        View viewGasolina95E5PremiumLabel = view.findViewById(R.id.textViewGasolina95E5PremiumLabel);\r\n        View viewGasolina98E10Precio = view.findViewById(R.id.textViewGasolina98E10);\r\n        View viewGasolina98E10Label = view.findViewById(R.id.textViewGasolina98E10Label);\r\n        View viewGasolina98E5Precio = view.findViewById(R.id.textViewGasolina98E5);\r\n        View viewGasolina98E5Label = view.findViewById(R.id.textViewGasolina98E5Label);\r\n        View viewBiodieselPrecio = view.findViewById(R.id.textViewBiodiesel);\r\n        View viewBiodieselLabel = view.findViewById(R.id.textViewBiodieselLabel);\r\n        View viewBioetanolPrecio = view.findViewById(R.id.textViewBioetanol);\r\n        View viewBioetanolLabel = view.findViewById(R.id.textViewBioetanolLabel);\r\n        View viewGasNaturalComprimidoPrecio = view.findViewById(R.id.textViewGasNaturalComprimido);\r\n        View viewGasNaturalComprimidoLabel = view.findViewById(R.id.textViewGasNaturalComprimidoLabel);\r\n        View viewGasNaturalLicuadoPrecio = view.findViewById(R.id.textViewGasNaturalLicuado);\r\n        View viewGasNaturalLicuadoLabel = view.findViewById(R.id.textViewGasNaturalLicuadoLabel);\r\n        View viewGasesLicuadosPetroleoPrecio = view.findViewById(R.id.textViewGasesLicuadosPetroleo);\r\n        View viewGasesLicuadosPetroleoLabel = view.findViewById(R.id.textViewGasesLicuadosPetroleoLabel);\r\n        View viewHidrogenoPrecio = view.findViewById(R.id.textViewHidrogeno);\r\n        View viewHidrogenoLabel = view.findViewById(R.id.textViewHidrogenoLabel);\r\n\r\n        for (String combustible : filtro.getCombustibles()) {\r\n            switch (combustible) {\r\n                case \"TODOS\":\r\n                    viewGasoilAPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasoilALabel.setVisibility(View.VISIBLE);\r\n                    viewGasoilBPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasoilBLabel.setVisibility(View.VISIBLE);\r\n                    viewGasoilPremiumPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasoilPremiumLabel.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E10Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E10Label.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E5Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E5Label.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E5PremiumPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E5PremiumLabel.setVisibility(View.VISIBLE);\r\n                    viewGasolina98E10Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina98E10Label.setVisibility(View.VISIBLE);\r\n                    viewGasolina98E5Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina98E5Label.setVisibility(View.VISIBLE);\r\n                    viewBiodieselPrecio.setVisibility(View.VISIBLE);\r\n                    viewBiodieselLabel.setVisibility(View.VISIBLE);\r\n                    viewBioetanolPrecio.setVisibility(View.VISIBLE);\r\n                    viewBioetanolLabel.setVisibility(View.VISIBLE);\r\n                    viewGasNaturalComprimidoPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasNaturalComprimidoLabel.setVisibility(View.VISIBLE);\r\n                    viewGasNaturalLicuadoPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasNaturalLicuadoLabel.setVisibility(View.VISIBLE);\r\n                    viewGasesLicuadosPetroleoPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasesLicuadosPetroleoLabel.setVisibility(View.VISIBLE);\r\n                    viewHidrogenoPrecio.setVisibility(View.VISIBLE);\r\n                    viewHidrogenoLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLEO A\":\r\n                    viewGasoilAPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasoilALabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLEO B\":\r\n                    viewGasoilBPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasoilBLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLEO PREMIUM\":\r\n                    viewGasoilPremiumPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasoilPremiumLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLINA 95 E10\":\r\n                    viewGasolina95E10Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E10Label.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLINA 95 E5\":\r\n                    viewGasolina95E5Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E5Label.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLINA 95 E5 PREMIUM\":\r\n                    viewGasolina95E5PremiumPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasolina95E5PremiumLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLINA 98 E10\":\r\n                    viewGasolina98E10Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina98E10Label.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASOLINA 98 E5\":\r\n                    viewGasolina98E5Precio.setVisibility(View.VISIBLE);\r\n                    viewGasolina98E5Label.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"BIODIESEL\":\r\n                    viewBiodieselPrecio.setVisibility(View.VISIBLE);\r\n                    viewBiodieselLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"BIOETANOL\":\r\n                    viewBioetanolPrecio.setVisibility(View.VISIBLE);\r\n                    viewBioetanolLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GAS NATURAL COMPRIMIDO\":\r\n                    viewGasNaturalComprimidoPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasNaturalComprimidoLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GAS NATURAL LICUADO\":\r\n                    viewGasNaturalLicuadoPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasNaturalLicuadoLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"GASES LICUADOS PETROLEO\":\r\n                    viewGasesLicuadosPetroleoPrecio.setVisibility(View.VISIBLE);\r\n                    viewGasesLicuadosPetroleoLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                case \"HIDROGENO\":\r\n                    viewHidrogenoPrecio.setVisibility(View.VISIBLE);\r\n                    viewHidrogenoLabel.setVisibility(View.VISIBLE);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void filtrarPorMarca( Filtro filtro) {\r\n        gasolineras.clear();\r\n\r\n        for (Gasolinera gasolinera : copia) {\r\n            gasolineras.add(gasolinera);\r\n        }\r\n\r\n        if (filtro.getMarca().equals(\"\")) {\r\n            return;\r\n        }\r\n\r\n        if (!filtro.getMarca().equals(\"Todas\")) {\r\n            Iterator<Gasolinera> itr = gasolineras.iterator();\r\n            while (itr.hasNext()) {\r\n                Gasolinera g = itr.next();\r\n\r\n                if (!g.getRotulo().equals(filtro.getMarca())) {\r\n                    itr.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void ordenarPorPrecioMenorAMayor(Filtro filtro) {\r\n        List<String> combustiblesAFiltar = filtro.getCombustibles();\r\n        if (combustiblesAFiltar.contains(\"TODOS\") || combustiblesAFiltar.contains(\"GASOLEO A\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasoleoA(), g2.getGasoleoA());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLEO B\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasoleoB(), g2.getGasoleoB());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLEO PREMIUM\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasoleoPremium(), g2.getGasoleoPremium());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 95 E10\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasolina95E10(), g2.getGasolina95E10());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 95 E5\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasolina95E5(), g2.getGasolina95E5());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 95 E5 PREMIUM\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasolina95E5Premium(), g2.getGasolina95E5Premium());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 98 E10\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasolina98E10(), g2.getGasolina98E10());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 98 E5\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasolina98E5(), g2.getGasolina98E5());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"BIODIESEL\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getBiodiesel(), g2.getBiodiesel());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"BIOETANOL\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getBioetanol(), g2.getBioetanol());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GAS NATURAL COMPRIMIDO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasNaturalComprimido(), g2.getGasNaturalComprimido());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GAS NATURAL LICUADO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasNaturalLicuado(), g2.getGasNaturalLicuado());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASES LICUADOS PETROLEO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getGasesLicuadosPetroleo(), g2.getGasesLicuadosPetroleo());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"HIDROGENO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g1.getHidrogeno(), g2.getHidrogeno());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n    }\r\n\r\n    public void ordenarPorPrecioMayorAMenor(Filtro filtro) {\r\n        List<String> combustiblesAFiltar = filtro.getCombustibles();\r\n        if (combustiblesAFiltar.contains(\"TODOS\") || combustiblesAFiltar.contains(\"GASOLEO A\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasoleoA(), g1.getGasoleoA());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLEO B\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasoleoB(), g1.getGasoleoB());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLEO PREMIUM\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasoleoPremium(), g1.getGasoleoPremium());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 95 E10\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasolina95E10(), g1.getGasolina95E10());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 95 E5\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasolina95E5(), g1.getGasolina95E5());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 95 E5 PREMIUM\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasolina95E5Premium(), g1.getGasolina95E5Premium());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 98 E10\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasolina98E10(), g1.getGasolina98E10());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASOLINA 98 E5\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasolina98E5(), g1.getGasolina98E5());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"BIODIESEL\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getBiodiesel(), g1.getBiodiesel());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"BIOETANOL\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getBioetanol(), g1.getBioetanol());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GAS NATURAL COMPRIMIDO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasNaturalComprimido(), g1.getGasNaturalComprimido());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GAS NATURAL LICUADO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasNaturalLicuado(), g1.getGasNaturalLicuado());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"GASES LICUADOS PETROLEO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getGasesLicuadosPetroleo(), g1.getGasesLicuadosPetroleo());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (combustiblesAFiltar.contains(\"HIDROGENO\")) {\r\n            Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {\r\n                @Override\r\n                public int compare(Gasolinera g1, Gasolinera g2) {\r\n                    return Double.compare(g2.getHidrogeno(), g1.getHidrogeno());\r\n                }\r\n            });\r\n            return;\r\n        }\r\n    }\r\n\r\n    public void ordenarPorPrecio(Filtro filtro) {\r\n        String ordenarPorPrecio = filtro.getOrdenarPorPrecio();\r\n        switch (ordenarPorPrecio) {\r\n            case \"\":\r\n                // No se ha especificado nada, entonces no se ordena de ninguna manera por precio\r\n                break;\r\n            case \"MayorAMenor\":\r\n                ordenarPorPrecioMayorAMenor(filtro);\r\n                break;\r\n            case \"MenorAMayor\":\r\n                ordenarPorPrecioMenorAMayor(filtro);\r\n                break;\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/isunican/proyectobase/Presenter/PresenterGasolineras.java	(revision adcc60e03579d57d9586a6adc139730e6e6fad6d)
+++ app/src/main/java/com/isunican/proyectobase/Presenter/PresenterGasolineras.java	(date 1605716100793)
@@ -32,6 +32,9 @@
 
 
 
+    public static class combustiblesInvalidos extends RuntimeException{}
+    public static class ordenacionNoValida extends RuntimeException{}
+
     //URLs para obtener datos de las gasolineras
     //https://sedeaplicaciones.minetur.gob.es/ServiciosRESTCarburantes/PreciosCarburantes/help
     public static final String URL_GASOLINERAS_SPAIN="https://sedeaplicaciones.minetur.gob.es/ServiciosRESTCarburantes/PreciosCarburantes/EstacionesTerrestres/";
@@ -284,7 +287,13 @@
         }
     }
 
-    public void ordenarPorPrecioMenorAMayor(Filtro filtro) {
+    public void ordenarPorPrecioMenorAMayor(Filtro filtro)
+            throws combustiblesInvalidos, ordenacionNoValida {
+
+        if (! filtro.getOrdenarPorPrecio().equals("MenorAMayor")){
+            throw new ordenacionNoValida();
+        }
+
         List<String> combustiblesAFiltar = filtro.getCombustibles();
         if (combustiblesAFiltar.contains("TODOS") || combustiblesAFiltar.contains("GASOLEO A")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
@@ -294,8 +303,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLEO B")) {
+        } else if (combustiblesAFiltar.contains("GASOLEO B")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -303,8 +311,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLEO PREMIUM")) {
+        } else if (combustiblesAFiltar.contains("GASOLEO PREMIUM")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -312,8 +319,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 95 E10")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 95 E10")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -321,8 +327,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 95 E5")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 95 E5")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -330,8 +335,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 95 E5 PREMIUM")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 95 E5 PREMIUM")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -339,8 +343,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 98 E10")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 98 E10")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -348,8 +351,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 98 E5")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 98 E5")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -357,8 +359,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("BIODIESEL")) {
+        } else if (combustiblesAFiltar.contains("BIODIESEL")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -366,8 +367,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("BIOETANOL")) {
+        } else if (combustiblesAFiltar.contains("BIOETANOL")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -375,8 +375,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GAS NATURAL COMPRIMIDO")) {
+        } else if (combustiblesAFiltar.contains("GAS NATURAL COMPRIMIDO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -384,8 +383,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GAS NATURAL LICUADO")) {
+        } else if (combustiblesAFiltar.contains("GAS NATURAL LICUADO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -393,8 +391,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASES LICUADOS PETROLEO")) {
+        } else if (combustiblesAFiltar.contains("GASES LICUADOS PETROLEO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -402,8 +399,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("HIDROGENO")) {
+        } else if (combustiblesAFiltar.contains("HIDROGENO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -411,10 +407,19 @@
                 }
             });
             return;
+        } else {
+            throw new combustiblesInvalidos();
         }
     }
+
+
+    public void ordenarPorPrecioMayorAMenor(Filtro filtro)
+            throws ordenacionNoValida, combustiblesInvalidos {
+
+        if (! filtro.getOrdenarPorPrecio().equals("MayorAMenor")){
+            throw new ordenacionNoValida();
+        }
 
-    public void ordenarPorPrecioMayorAMenor(Filtro filtro) {
         List<String> combustiblesAFiltar = filtro.getCombustibles();
         if (combustiblesAFiltar.contains("TODOS") || combustiblesAFiltar.contains("GASOLEO A")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
@@ -424,8 +429,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLEO B")) {
+        } else if (combustiblesAFiltar.contains("GASOLEO B")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -433,8 +437,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLEO PREMIUM")) {
+        } else if (combustiblesAFiltar.contains("GASOLEO PREMIUM")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -442,8 +445,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 95 E10")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 95 E10")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -451,8 +453,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 95 E5")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 95 E5")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -460,8 +461,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 95 E5 PREMIUM")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 95 E5 PREMIUM")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -469,8 +469,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 98 E10")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 98 E10")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -478,8 +477,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASOLINA 98 E5")) {
+        } else if (combustiblesAFiltar.contains("GASOLINA 98 E5")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -487,8 +485,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("BIODIESEL")) {
+        } else if (combustiblesAFiltar.contains("BIODIESEL")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -496,8 +493,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("BIOETANOL")) {
+        } else if (combustiblesAFiltar.contains("BIOETANOL")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -505,8 +501,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GAS NATURAL COMPRIMIDO")) {
+        } else if (combustiblesAFiltar.contains("GAS NATURAL COMPRIMIDO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -514,8 +509,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GAS NATURAL LICUADO")) {
+        } else if (combustiblesAFiltar.contains("GAS NATURAL LICUADO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -523,8 +517,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("GASES LICUADOS PETROLEO")) {
+        } else if (combustiblesAFiltar.contains("GASES LICUADOS PETROLEO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -532,8 +525,7 @@
                 }
             });
             return;
-        }
-        if (combustiblesAFiltar.contains("HIDROGENO")) {
+        } else if (combustiblesAFiltar.contains("HIDROGENO")) {
             Collections.sort(getGasolineras(), new Comparator<Gasolinera>() {
                 @Override
                 public int compare(Gasolinera g1, Gasolinera g2) {
@@ -541,6 +533,8 @@
                 }
             });
             return;
+        } else {
+            throw new combustiblesInvalidos();
         }
     }
 
